"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Subscriptions:
    r"""Everything about Subscription collection
    https://doc.getlago.com/docs/api/subscriptions/subscription-object - Find out more
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create(self, request: shared.SubscriptionCreateInput) -> operations.CreateSubscriptionResponse:
        r"""Assign a plan to a customer
        Assign a plan to a customer
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/subscriptions'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSubscriptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Subscription])
                res.subscription = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponseBadRequest])
                res.api_response_bad_request = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponseUnauthorized])
                res.api_response_unauthorized = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponseNotFound])
                res.api_response_not_found = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponseUnprocessableEntity])
                res.api_response_unprocessable_entity = out

        return res

    def destroy(self, request: operations.DestroySubscriptionRequest) -> operations.DestroySubscriptionResponse:
        r"""Terminate a subscription
        Terminate a subscription
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DestroySubscriptionRequest, base_url, '/subscriptions/{external_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DestroySubscriptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Subscription])
                res.subscription = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponseUnauthorized])
                res.api_response_unauthorized = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponseNotFound])
                res.api_response_not_found = out
        elif http_res.status_code == 405:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponseNotAllowed])
                res.api_response_not_allowed = out

        return res

    def find_all(self, request: operations.FindAllSubscriptionsRequest) -> operations.FindAllSubscriptionsResponse:
        r"""Find subscriptions
        Find all suscriptions for certain customer
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/subscriptions'
        
        query_params = utils.get_query_params(operations.FindAllSubscriptionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindAllSubscriptionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Subscriptions])
                res.subscriptions = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponseUnauthorized])
                res.api_response_unauthorized = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponseNotFound])
                res.api_response_not_found = out

        return res

    def update(self, request: operations.UpdateSubscriptionRequest) -> operations.UpdateSubscriptionResponse:
        r"""Update an existing subscription
        Update an existing subscription by external ID
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateSubscriptionRequest, base_url, '/subscriptions/{external_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "subscription_update_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSubscriptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Subscription])
                res.subscription = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponseBadRequest])
                res.api_response_bad_request = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponseUnauthorized])
                res.api_response_unauthorized = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponseNotFound])
                res.api_response_not_found = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponseUnprocessableEntity])
                res.api_response_unprocessable_entity = out

        return res

    